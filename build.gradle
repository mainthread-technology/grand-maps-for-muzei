// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.0-rc1'
        //noinspection GradleDynamicVersion
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

allprojects {
    repositories {
        jcenter()
        maven {
            url 'https://maven.fabric.io/public'
        }
    }
}

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    ext {
        gitSha = { ->
            try {
                def stdout = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'rev-parse', '--short', 'HEAD'
                    standardOutput = stdout
                }
                return stdout.toString().trim()
            } catch (ignored) {
                return null;
            }
        }

        // key store properties
        def Properties localProps = new Properties()
        File localPropsFile = file('../local.properties')
        if (localPropsFile.exists()) {
            localProps.load(new FileInputStream(localPropsFile))
        }
        keyProps = new Properties()
        if (localProps['keystore.props.file'] != null) {
            keyProps.load(new FileInputStream(file(localProps['keystore.props.file'])))
        }
        apiProps = new Properties()
        if (localProps['api.props.file'] != null) {
            apiProps.load(new FileInputStream(file(localProps['api.props.file'])))
        }

        versionMajor = 1
        versionMinor = 17
        versionPatch = 0
        versionBuild = 0 // bump for dogfood builds, public betas, etc.

        buildTools = "24.0.2"
        compileAndTargetSdkLevel = 24
        minSdkLevel = 17
        supportLibraryVersion = '24.2.0'
        daggerVersion = '2.6.1'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

task clean(type: Delete) {
    group 'build'
    delete rootProject.buildDir
}
